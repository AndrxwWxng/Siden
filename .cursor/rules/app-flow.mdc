---
description: 
globs: 
alwaysApply: true
---
User Journey Flows
1. User Onboarding Flow
The user onboarding process begins when a new user signs up or logs in to the platform. They're prompted to create their first project by providing a name, description, and basic details. Next, they select which agent roles they need for their team from available options (Developer, Product Manager, Marketing, etc.).
After selecting roles, users define project goals and constraints, which helps agents understand the project scope. Users then connect any external tools or resources the agents need access to. Before launching, users review the team configuration and confirm their choices. Finally, they're directed to the dashboard where they can start working with their new agent team.
2. Project Creation Flow
Project creation starts with the user defining project details including name, description, timeline, and objectives. Next, they configure project-specific settings like privacy, collaboration options, and notification preferences. Users then select agent roles needed for this specific project, tailoring each agent's personality and skill focus as needed.
The system forms the team by initializing agents with appropriate roles and establishing communication protocols between them. Users can connect external tools like Google Sheets, GitHub, or email services that agents will need to access. Finally, users review all project settings, make any adjustments, and save the project to begin work.
3. Agent Team Interaction Flow
Team interactions begin when the CEO (user) issues a directive or goal to the team. This triggers a team planning session where agents collaborate to understand the objective and develop a strategic approach. The Product Manager agent typically leads this process, breaking down the goal into manageable tasks.
Tasks are then distributed among team members based on their roles and expertise. Agents collaborate on interdependent tasks, sharing relevant information and coordinating their efforts. As tasks are completed, agents update their progress and may require approval or feedback from other agents or the CEO. Finally, results are presented to the CEO, who can review, provide feedback, or issue new directives.
Core System Flows
1. Agent Communication Protocol
When Agent A needs to communicate, it first creates an intent that defines the purpose of the message (question, update, proposal, etc.). The system formalizes this intent into a structured message with appropriate metadata, priority level, and context. The message is then routed to the appropriate recipient (Agent B or broadcast to all agents).
Upon receiving the message, Agent B processes it based on priority and intent type, consulting its memory and current context as needed. Agent B formulates a response with its own intent classification. Agent A receives and processes this response, updating its understanding and potentially creating follow-up communications if necessary.
2. Memory Management Flow
The memory system activates when new information is generated through agent actions, communications, or user input. The system evaluates this information's importance based on relevance to current tasks, long-term project goals, and novelty. Based on this evaluation, the system decides whether to store the information in short-term memory, long-term memory, or both.
Short-term memory is volatile and expires after the current session, containing active tasks, recent messages, and immediate context. Long-term memory is persistent, with information converted into vector embeddings for efficient semantic search. When agents need information, they query the memory system, which retrieves relevant content from both short and long-term storage based on semantic similarity.
3. Sandbox Execution Flow
When an agent requires code execution or external tool interaction, it first requests sandbox initialization. The system creates an isolated environment specific to that agent's role and current task. Before execution, all code or actions undergo security validation to ensure they meet safety policies and don't attempt unauthorized operations.
The system allocates appropriate resources to the sandbox based on the expected complexity of the operation and current system load. The code executes with active monitoring for performance issues, security violations, or excessive resource usage. Once execution completes, the system processes the results, extracts relevant information, and makes it available to the requesting agent and, if appropriate, other team members.
Error Handling Flows
1. Agent Failure Recovery
The system continuously monitors agent operations for failures, timeouts, or unexpected results. When an error is detected, the system captures detailed diagnostic information and classifies the error type. For recoverable errors, the system initiates an automatic retry using an exponential backoff strategy, with a maximum of three attempts.
If the retry succeeds, the agent continues normal operation with the successful result. If all retry attempts fail, the system marks the operation as failed and notifies the project owner with error details. Critical failures trigger immediate user notification, while non-critical issues may be queued for later review. All errors are logged with full context for debugging purposes.
2. User Intervention Flow
When a user observes an issue with agent behavior or wants to redirect team efforts, they can initiate an intervention. The intervention interface allows users to select specific actions like pausing operations, modifying tasks, or clarifying objectives. When an intervention occurs, affected team activities are temporarily paused to prevent continued work in the wrong direction.
The system presents the CEO's directive to all relevant agents, who process the new guidance and adjust their understanding and priorities accordingly. Agents may request clarification if the directive is ambiguous. Once agents have incorporated the changes, normal operations resume with the updated direction, ensuring the team stays aligned with the CEO's vision.
Data Flows
1. Project Data Flow
Project information flows from initial user input through the configuration system, which structures it for agent consumption. This project configuration triggers agent initialization, with each agent receiving role-specific information and access permissions. The agent team then coordinates to establish task dependencies and workflow structures.
As work progresses, the system tracks project progress through task completion metrics, timeline adherence, and resource utilization. This data flows to both the agents (to inform decision-making) and to the user dashboard (to provide visibility). Project data remains persistent and accessible throughout the project lifecycle, enabling continuous improvement and adaptation.
2. External Integration Flow
When connecting to external tools, the system first validates user-provided credentials and establishes secure connections. The integration system creates appropriate mappings between internal data structures and external API formats. When an agent needs to interact with an external tool, it formats requests according to the tool's API specifications.
Requests pass through security validation before execution, then the system executes the API call with appropriate error handling and retry logic. Responses from external services undergo data transformation to convert them into formats suitable for agent processing. Finally, the system incorporates relevant results into the agent's context and stores them in the project's data repository when appropriate.